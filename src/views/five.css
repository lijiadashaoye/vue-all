/****************
css 获取自定义data-*数据
attr() 目前支持的仅有伪元素的 content 属性，把想添加的内容以此罗列
******************/
.self-data span[data-descr] {
    position: relative;
    text-decoration: none;
    color: #00f;
    cursor: help;
    padding-left: 50px;
}

.self-data span[data-descr]:hover::after {
    content: " ("attr(data-descr) ")"' 'url(https://mdn.mozillademos.org/files/7691/mdn-favicon16.png) "\1f4a1";
    position: absolute;
    left: 90px;
    top: 0px;
    min-width: 218px;
    border: 1px #aaaaaa solid;
    border-radius: 10px;
    background-color: #4c21e9;
    padding: 2px 0 2px 5px;
    color: #e7d8d8;
    font-size: 14px;
    z-index: 1;
}

.self-data span[data-descr]:hover::before {
    content: '::before';
    position: absolute;
    left: -5px;
    top: 0px;
    color: #000000;
    font-size: 14px;
    z-index: 1;
}

/****************
css 动画
animation-name：指定@keyframes描述动画关键帧的规则名称。可以依次写出多个动画
animation-duration：配置动画完成一个周期所需的时间。默认值为0s，表示无动画。
animation-timing-function：通过建立加速曲线，动画如何在关键帧之间过渡。
animation-delay：配置元素加载时间与动画序列开始之间的延迟。
animation-iteration-count：配置动画应重复的次数，任何大于零的数字，不可为负值；您可以指定infinite无限期重复动画，。
animation-direction：配置动画在序列中每次运行时是否应交替显示方向或重置为起点并重复自身，
常用值：alternate动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向，比如，ease-in 在反向时成为ease-out。

animation-fill-mode 设置CSS动画在执行之前和之后如何将样式应用于其目标
可用值：
  forwards：会在动画结束时，保持最后一帧样式
  backwards：在应用于目标时立即应用第一个关键帧中定义的样式值

animation是以上属性的简写集合，只需将每个属性的可用值依次罗列出来即可；
animation:  3s alternate 3 slidein; 或 animation: alternate 3s 3 slidein;

// 可以添加js监听动画事件
element.addEventListener("animationstart", listener, false);
element.addEventListener("animationend", listener, false);
element.addEventListener("animationiteration", listener, false);
******************/

.animation>p {
    animation-name: slidein, rotated;
    animation-duration: 3s, 3s;
    animation-iteration-count: 3, 3;
    animation-direction: alternate;
    animation-fill-mode: none, forwards;
}

@keyframes slidein {
    from {
        margin-left: 200%;
        width: 300%;
    }

    to {
        margin-left: 0%;
        width: 100%;
    }
}

@keyframes rotated {
    from {
        color: red;
        font-size: 12px;
    }

    to {
        color: green;
        font-size: 22px;
    }
}

/***********************
使用文字对背景图进行剪切
background-attachment：决定背景图像的位置是在视口内固定 fixed，还是随着包含它的区块滚动 scroll。
************************/

.backgrounds p {
    display: inline-block;
    width: 200px;
    height: 180px;
    text-align: center;
    line-height: 60px;
    font-size: 55px;
    font-weight: bold;
    letter-spacing: 10px;
    /* transparent：透明效果 */
    color: transparent;
    background-image: url('../assets/timg.jpg');
    background-size: cover;
    background-clip: text;
    background-origin: content-box;
    background-position: top 0px right 0px;

}

/*************************************
           背景图缩写方法
*************************************/
.background2 {
    font-size: 14px;
    background: url('../assets/timg.jpg') honeydew no-repeat 10% 100% / 180px 90px;
}


/*************************************
           滤镜
*************************************/
.lvjing>div {
    margin: 0 0 5px 0;
    display: flex;
}

.lvjing>div>p:nth-child(1) {
    width: 70%;
}

.lvjing img {
    width: 80px;
    height: 70px;
}

.brightness>img {
    filter: brightness(1.2);
}

.blurs>img {
    filter: blur(0.05vw);
    /* rem px vh vw 都可以*/
}

.contrast>img {
    filter: contrast(20%);
    /* rem px vh vw %都可以*/
}

.dropShadow>img {
    filter: drop-shadow(10px 10px 20px red);
    /* rem px vh vw %都可以*/
}

/*************************************
        阴影的写法
*************************************/
.shadow {
    width: 150px;
    height: 50px;
    margin-top: 20px;
    background: rgb(245, 244, 244);
    /* 阴影也会随着圆角变化 */
    border-bottom-right-radius: 20px;
}

/* 阴影模糊半径：值越大，模糊面积越大，阴影就越大越淡。 不能为负值*/
/* 阴影扩散半径：取正值时，阴影扩大；取负值时，阴影收缩 */

.shadow1 {
    /* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */
    box-shadow: 4px 4px 4px 5px rgba(69, 238, 134, 0.8);
}

.shadow2 {
    /* 插页(阴影向内) x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */
    /* inset时，x y 偏移量默认在 top left 数值为负数时，会定位到 right bottom */
    box-shadow: inset -4px 4px 4px -1px rgba(226, 110, 110, 0.7);
}

.shadow3 {
    /* 任意数量的阴影，以逗号分隔 */
    box-shadow: 5px 5px 2px 3px red, inset 2px 2px 2px 1px rgba(133, 226, 110, 0.7);
}

/*************************************
        border 的写法
*************************************/
.border {
    width: 170px;
    height: 100px;
    margin-top: 20px;
    background: rgb(221, 220, 220);
    box-sizing: border-box;
}

.border1 {
    /* 与margin一样，可以写4个，也可写两个*/
    border-width: 6px 14px 10px 20px;
    /*  border-width: 2px 8px;  */
    border-color: red blue sandybrown yellow;
    border-style: solid dashed ridge dotted;
}

.border2 {
    border-width: 10px 26px;
    border-color: indigo;
    border-style: double;
    background-clip: content-box;
}

/*************************************
        表格样式
*************************************/
.isTable {
    border-collapse: collapse;
    caption-side: bottom;
}

.isTable>caption {
    border: 1px solid red;
}

.isTable td {
    border: 1px solid blue;
}

.isTable input {
    caret-color: rgba(69, 238, 134);
}

/*************************************
        多列布局
*************************************/
.column {
    column-count: 2;
    /* 列分割线的线型样式  */
    column-rule: solid 8px red;
    /* 
    column-fill:auto 指示内容在各列之间从头开始顺序罗列
    column-fill:balance 指示内容在各列之间平均分配
    */
    column-fill: balance;
    /* 列间距，看起来像分割线的 margin */
    column-gap: 4px;
}

.column>h3 {
    text-align: center;
    column-span: all;
}

/*************************************
        锥形渐变
*************************************/
.yuanzhui>p {
    display: inline-block;
    margin-right: 5px;
    width: 100px;
    height: 100px;
}

.yuanzhui>section {
    font-size: 14px;
}

.yuanzhui>div {
    background: url('../assets/88.jpg') no-repeat left bottom/55% 65%;
    height: 140px;
}

.yuanzhui>div>p {
    margin: 0;
    font-size: 14px;
}

.yuanzhui span {
    margin-right: 25px;
}

/* 圆锥形渐变的色标则用角度(或弧度)来指定 */
/* 如果第一个或最后一个色标指定角度，则它们的值分别为0deg和360deg */
/* 默认情况下，颜色从一个色标处的颜色平滑过渡到下一个色标处的颜色，
   颜色之间的中点是颜色过渡之间的中点。 */
.yuanzhui>p:nth-of-type(1) {
    background: conic-gradient(red 40deg, yellow 100deg, blue 150deg, pink);
}

/* 若不想要渐变，需要明确分界 */
.yuanzhui>p:nth-of-type(2) {
    background: conic-gradient(red 50deg, yellow 50deg, yellow 160deg, blue 160deg, blue 360deg);
}

.yuanzhui>p:nth-of-type(3) {
    background: conic-gradient(#fff 90deg, #000 90deg 180deg, #fff 180deg 270deg, #000 270deg) left top/25% 25%;
}

/* 
使用 ”from 角度 at 位置“ 定义渐变的起始角度和旋转圆心位置
也可以只写 from 角度 或 at 位置
*/
.yuanzhui>p:nth-of-type(4) {
    background: conic-gradient(from 50deg at 25% 25%, red 90deg, yellow 180deg, blue 270deg);
    /* background: conic-gradient(from 50deg, red 90deg, yellow 180deg, blue 270deg); */
    /* background: conic-gradient(at 40% 30%, red 90deg, yellow 180deg, blue 270deg); */
}

/*************************************
        鼠标样式
*************************************/
#div {
    display: flex;
    flex-wrap: wrap;
}

#div p {
    border: 1px solid rgb(241, 194, 194);
    margin: 0 5px 5px 0;
    padding: 0 5px;
    color: rgb(241, 194, 194);
}


/*************************************
        网格布局
*************************************/
.gridTip {
    font-size: 14px;
    margin: 0;
}

.grid {
    background-color: rgb(218, 250, 215);
}

.setKuan {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
}

#kuandu {
    margin: 0 5px 5px 0;
}

.showGrid {
    width: 100%;
    height: 165px;
    background: url('../assets/1.png') center/cover;
}

.grid div {
    border: 1px solid rgb(228, 165, 165);
    border-radius: 3px;
    background-color: antiquewhite;
}

.grid1 {
    display: grid;
    /* 
      fr 指代一个网格计算单位值，弹性值，
      当fr用在 rows 时，如果没有给外框定义height属性，
      则以子元素 content 高最大值，定义为 1fr 表示高时的值；

      当fr用在 columns 时，如果没有给外框定义width属性，
      则以子元素 content 宽定义为 fr 表示宽时的值
      若子元素的内容较多，肯定即使写了平均每格是 1fr宽度，但也会出现网格宽度不同现象
    */
    /* 
    写法一：
      grid-template-columns: repeat(3, 1fr); 1行3列
      repeat(3, 1fr) 表示重复3次，生成1行3列，每格是 1个网格单位宽度
    写法二：
      第一个参数表示第一列宽度，第二个参数表示第二列宽度，可以写很多个
      每一个表示一个表格宽度，写了几个就表示一行里有几个表格，如：
      grid-template-columns: 2fr 1fr 1fr 1fr 1fr 1fr 1fr 2fr; 
      表示一行里有10格，第一格和最后一个占2个单位宽度
    */
    grid-template-columns: repeat(3, 1fr);
    /* 
    写法一：
      grid-template-rows: repeat(3, 1fr); 3行1列
      repeat(3, 1fr) 表示重复3次，生成3行1列，每行是 1个单位网格高度
    写法二：
      第一个参数表示第一列高度，第二个参数表示第二列高度，可以写很多个
      每一个表示一个表格高度，写了几个就表示一列里有几行表格，如：
      grid-template-rows: 2fr 1fr 1fr; 
      表示一列里有4格，第一行占2个单位高度
    */
    grid-template-rows: 1fr 1fr;
    font-size: 12px;
}

.grid2 {
    display: grid;
    /* 设置网格间距，写法同 margin 
    grid-gap:  grid-row-gap grid-column-gap;
    等同于分开写：
    grid-row-gap: 2px;
    grid-column-gap: 10px;
    */
    grid-row-gap: 2px;
    grid-column-gap: 10px;
    font-size: 12px;
}

.wrapper {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 20px);
    font-size: 12px;
}

.wrapper>div {
    border: 1px solid red;
    box-sizing: border-box;
}

.box1 {
    /* 
    跨行写法一：grid-row: 1 / span 3;
    表示从第一行，跨3行，span 关键字表示‘跨’，前后都可以加 span (看 box4)
    
    跨行写法二：grid-row: 1 / span 3;
    表示从第一行，跨到第4行，指定起始和结束行号

    跨行写法三：详细指定起始和结束
     grid-column-start: 1;
     grid-column-end: 2;
     grid-row-start: 1;
     grid-row-end: 4;

    跨行写法四：使用 grid-area: 1 / 1 / 4 / 2; 值的顺序如下：
    类似 margin 从 top 逆时针到 right 依次罗列
          top              left            bottom           right
    grid-row-start / grid-column-start /grid-row-end / grid-column-end

    跨行写法五：反方向写
    */
    grid-column-start: -4;
    grid-column-end: -3;
    grid-row-start: -4;
    grid-row-end: -1;
}

.box2 {
    grid-column: 3;
    grid-row: 1 / span 2;
}

.box3 {
    grid-column: 2;
    grid-row: 1;
}

.box4 {
    grid-column: 2 / span 2;
    grid-row: span 3 / span 4;
}

.nameGrid {
    display: grid;
    grid-template-columns: 1fr 2fr;
    /* 命名网格的罗列顺序就是展现顺序 */
    grid-template-areas: "content img";
}

.nameGrid li:nth-last-of-type(1) {
    /* 对网格进行命名 */
    grid-area: content;
    background-color: #ffd8a8;
}

.nameGrid li:nth-last-of-type(2) {
    grid-area: img;
    background: url('../assets/timg.jpg') center/cover;
}



/*************************************
        剪切图形
*************************************/

.path>section {
    display: flex;
    flex-wrap: wrap;
    align-content: flex-start;
}

.path>p {
    font-size: 14px;
    margin: 0;

}

.path>section>div {
    width: 170px;
    height: 170px;
    margin: 5px;
    background-color: rgb(243, 220, 220);
    font-size: 12px;
}

.path>section p {
    height: 70%;
    background-color: rgb(157, 221, 144);
}

.path1 {
    padding: 7px;
    clip-path: inset(10px 50px 30px 10px);
}

.path2 {
    clip-path: circle(50px at 80px 60px);
}

.path3 {
    clip-path: ellipse(80px 40px at 50% 35%);
}

.path4 {
    clip-path: polygon(40px 0px, 140px 20px, 80px 80px);
}